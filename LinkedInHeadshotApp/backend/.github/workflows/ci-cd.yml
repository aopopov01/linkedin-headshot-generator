# OmniShot Backend CI/CD Pipeline
# Comprehensive pipeline with testing, security scanning, building, and deployment

name: OmniShot Backend CI/CD

on:
  push:
    branches: 
      - main
      - develop
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: 
      - main
      - develop
    paths:
      - 'backend/**'
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: omnishot/backend

jobs:
  # Static Analysis and Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run ESLint
        working-directory: ./backend
        run: npm run lint

      - name: Run security audit
        working-directory: ./backend
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=backend/package.json --severity-threshold=high

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: typescript
          source-root: backend

  # Unit and Integration Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: omnishot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/omnishot_test
        run: |
          npx prisma generate
          npx prisma db push

      - name: Run unit tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/omnishot_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: npm run test

      - name: Run integration tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/omnishot_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: npm run test:integration

      - name: Generate test coverage
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/omnishot_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Build and Push Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Sign the container image
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.1.1'
      
      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build.outputs.digest }}

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1

      - name: Start test environment
        working-directory: ./backend
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run performance tests
        run: ./k6 run backend/tests/performance/load-test.js

      - name: Stop test environment
        working-directory: ./backend
        run: docker-compose -f docker-compose.test.yml down

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS Staging
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster omnishot-staging \
            --service omnishot-backend \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster omnishot-staging \
            --services omnishot-backend

      - name: Run smoke tests
        run: |
          curl -f https://staging-api.omnishot.com/api/health || exit 1

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🚀 Staging deployment completed
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Image: ${{ needs.build.outputs.image-tag }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create deployment backup
        run: |
          # Backup current production image
          aws ecs describe-services \
            --cluster omnishot-production \
            --services omnishot-backend \
            --query 'services[0].taskDefinition' \
            --output text > backup-task-definition.txt

      - name: Blue-Green deployment
        run: |
          # Deploy to green environment
          ./scripts/blue-green-deploy.sh \
            --cluster omnishot-production \
            --service omnishot-backend \
            --image ${{ needs.build.outputs.image-tag }}

      - name: Run production health checks
        run: |
          ./scripts/health-check.sh https://api.omnishot.com

      - name: Switch traffic to new deployment
        run: |
          ./scripts/switch-traffic.sh \
            --cluster omnishot-production \
            --service omnishot-backend

      - name: Monitor deployment metrics
        run: |
          ./scripts/monitor-deployment.sh \
            --duration 300 \
            --cluster omnishot-production \
            --service omnishot-backend

      - name: Rollback on failure
        if: failure()
        run: |
          ./scripts/rollback.sh \
            --cluster omnishot-production \
            --service omnishot-backend \
            --backup-file backup-task-definition.txt

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🎉 Production deployment ${{ job.status }}!
            Release: ${{ github.event.release.tag_name }}
            Image: ${{ needs.build.outputs.image-tag }}
            ${{ job.status == 'success' && '✅ All systems operational' || '❌ Deployment failed - check logs' }}

  # Database Migration
  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Create database backup
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          # Create backup before migration
          ./scripts/backup-database.sh

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          npx prisma migrate deploy

      - name: Verify migration
        working-directory: ./backend
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          npx prisma db seed --preview-feature

  # Security Monitoring
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Container image vulnerability scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          fail-build: true
          severity-cutoff: high

      - name: Upload vulnerability results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Cleanup old images
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success')
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'backend'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: false