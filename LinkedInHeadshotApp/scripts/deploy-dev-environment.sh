#!/bin/bash

# OmniShot Development Environment Deployment Script
# Complete setup for mobile-backend connectivity testing

set -e

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration
HOST_IP="192.168.20.112"
BACKEND_PORT="3000"
EXPO_PORT="8081"

echo -e "${BOLD}${CYAN}üöÄ OmniShot Development Environment Deployment${NC}"
echo "======================================================"
echo ""

# Function to check dependencies
check_dependencies() {
    echo -e "${BLUE}üîç Checking Dependencies...${NC}"
    
    local missing_deps=()
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        missing_deps+=("Node.js")
    else
        echo -e "  ‚úÖ Node.js $(node --version)"
    fi
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        missing_deps+=("npm")
    else
        echo -e "  ‚úÖ npm $(npm --version)"
    fi
    
    # Check Expo CLI
    if ! command -v npx &> /dev/null; then
        missing_deps+=("npx")
    else
        echo -e "  ‚úÖ npx available"
    fi
    
    # Check curl for testing
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    else
        echo -e "  ‚úÖ curl available"
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}‚ùå Missing dependencies: ${missing_deps[*]}${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ All dependencies satisfied${NC}"
}

# Function to setup project dependencies
setup_dependencies() {
    echo -e "\n${BLUE}üì¶ Setting up Project Dependencies...${NC}"
    
    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}‚è≥ Installing npm dependencies...${NC}"
        npm install
    else
        echo -e "${GREEN}‚úÖ Dependencies already installed${NC}"
    fi
    
    # Check backend dependencies
    if [ ! -d "backend/node_modules" ]; then
        echo -e "${YELLOW}‚è≥ Installing backend dependencies...${NC}"
        cd backend && npm install && cd ..
    else
        echo -e "${GREEN}‚úÖ Backend dependencies already installed${NC}"
    fi
}

# Function to validate network configuration
validate_network() {
    echo -e "\n${BLUE}üåê Validating Network Configuration...${NC}"
    
    if [ -f "scripts/validate-network-connectivity.js" ]; then
        node scripts/validate-network-connectivity.js
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Network validation script not found${NC}"
        
        # Basic validation
        echo -e "${CYAN}üîÑ Running basic network test...${NC}"
        if curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 "http://$HOST_IP:$BACKEND_PORT/health" | grep -E "200|503" > /dev/null; then
            echo -e "${GREEN}‚úÖ Backend is reachable${NC}"
        else
            echo -e "${RED}‚ùå Cannot reach backend - ensure it's running${NC}"
            return 1
        fi
    fi
}

# Function to configure environment
configure_environment() {
    echo -e "\n${BLUE}‚öôÔ∏è  Configuring Environment...${NC}"
    
    # Create development environment file
    cat > .env.development << EOF
# OmniShot Development Environment
# Auto-generated by deploy-dev-environment.sh

# Network Configuration
EXPO_PUBLIC_API_BASE_URL=http://$HOST_IP:$BACKEND_PORT
EXPO_PUBLIC_HOST_IP=$HOST_IP
EXPO_PUBLIC_BACKEND_PORT=$BACKEND_PORT

# Development Settings
EXPO_PUBLIC_DEVELOPMENT_MODE=true
EXPO_PUBLIC_ENABLE_NETWORK_DEBUGGING=true
EXPO_PUBLIC_USE_TUNNEL_FALLBACK=true

# Generated at: $(date)
EOF

    # Create logs directory
    mkdir -p logs
    
    # Make scripts executable
    chmod +x scripts/*.sh
    chmod +x scripts/*.js
    
    echo -e "${GREEN}‚úÖ Environment configured${NC}"
    echo -e "   üìç Primary endpoint: http://$HOST_IP:$BACKEND_PORT"
    echo -e "   üìù Configuration saved to .env.development"
}

# Function to test backend connectivity
test_backend() {
    echo -e "\n${BLUE}üîß Testing Backend Connectivity...${NC}"
    
    # Check if backend is running
    if ! pgrep -f "node server.js" > /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Backend not running, starting it...${NC}"
        
        cd backend
        nohup node server.js > ../logs/backend.log 2>&1 &
        BACKEND_PID=$!
        cd ..
        
        echo -e "${CYAN}   Backend started with PID: $BACKEND_PID${NC}"
        
        # Wait for backend to initialize
        sleep 5
    else
        echo -e "${GREEN}‚úÖ Backend is already running${NC}"
    fi
    
    # Test health endpoint
    local max_attempts=5
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        echo -e "${CYAN}   Attempt $attempt/$max_attempts: Testing health endpoint...${NC}"
        
        local http_code=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 "http://$HOST_IP:$BACKEND_PORT/health" || echo "ERROR")
        
        if [[ "$http_code" =~ ^(200|503)$ ]]; then
            echo -e "${GREEN}‚úÖ Backend health check passed (HTTP $http_code)${NC}"
            return 0
        fi
        
        attempt=$((attempt + 1))
        if [ $attempt -le $max_attempts ]; then
            sleep 3
        fi
    done
    
    echo -e "${RED}‚ùå Backend health check failed after $max_attempts attempts${NC}"
    return 1
}

# Function to prepare mobile development
prepare_mobile() {
    echo -e "\n${BLUE}üì± Preparing Mobile Development Environment...${NC}"
    
    # Check Android SDK for development builds
    if [ -n "$ANDROID_HOME" ]; then
        echo -e "${GREEN}‚úÖ Android SDK found at: $ANDROID_HOME${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ANDROID_HOME not set - development builds may not work${NC}"
    fi
    
    # Create QR code instructions
    cat > mobile-connection-guide.md << EOF
# Mobile Connection Guide

## Quick Start
1. Ensure your mobile device is on the same WiFi network as this computer
2. Run: \`npm run dev-server\` to start the development environment
3. Scan the QR code in Expo Go app

## Connection Endpoints
- **Primary (Recommended)**: http://$HOST_IP:$BACKEND_PORT
- **Expo Tunnel**: Available when using \`npm run dev-server:tunnel\`

## Platform-Specific Instructions

### Expo Go (Physical Device)
\`\`\`bash
npm run dev-server:tunnel
\`\`\`
Scan QR code in Expo Go app

### Development Build (Recommended)
\`\`\`bash
npm run dev-build:android
npm run dev-server:lan
\`\`\`
Install APK on device, then start development server

### Android Emulator
\`\`\`bash
npm run dev-server:lan
\`\`\`
Start Android Studio emulator first

## Troubleshooting
- Run: \`npm run validate-network\` to check connectivity
- Check: \`npm run backend-health\` to verify backend status
- Logs: Check \`logs/backend.log\` for backend issues

Generated: $(date)
EOF

    echo -e "${GREEN}‚úÖ Mobile development guide created: mobile-connection-guide.md${NC}"
}

# Function to run final validation
final_validation() {
    echo -e "\n${BLUE}üéØ Running Final Validation...${NC}"
    
    # Test all npm scripts
    local scripts_to_test=("validate-network" "backend-health")
    
    for script in "${scripts_to_test[@]}"; do
        echo -e "${CYAN}   Testing: npm run $script${NC}"
        if npm run "$script" > /dev/null 2>&1; then
            echo -e "${GREEN}   ‚úÖ $script: PASS${NC}"
        else
            echo -e "${YELLOW}   ‚ö†Ô∏è  $script: WARN (may work in runtime)${NC}"
        fi
    done
    
    # Test file permissions
    if [ -x "scripts/start-development-server.sh" ]; then
        echo -e "${GREEN}   ‚úÖ Scripts are executable${NC}"
    else
        echo -e "${RED}   ‚ùå Script permissions issue${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Final validation complete${NC}"
}

# Function to display deployment summary
show_summary() {
    echo -e "\n${BOLD}${CYAN}üéâ Deployment Complete!${NC}"
    echo "================================"
    echo ""
    echo -e "${GREEN}‚úÖ Development environment is ready${NC}"
    echo -e "${GREEN}‚úÖ Network connectivity validated${NC}"
    echo -e "${GREEN}‚úÖ Backend server operational${NC}"
    echo -e "${GREEN}‚úÖ Mobile development configured${NC}"
    echo ""
    echo -e "${BOLD}Next Steps:${NC}"
    echo -e "1. ${CYAN}Start full development environment:${NC}"
    echo -e "   npm run dev-server"
    echo ""
    echo -e "2. ${CYAN}For Expo Go testing:${NC}"
    echo -e "   npm run dev-server:tunnel"
    echo ""
    echo -e "3. ${CYAN}For development builds:${NC}"
    echo -e "   npm run dev-build:android"
    echo -e "   npm run dev-server:lan"
    echo ""
    echo -e "4. ${CYAN}Monitor connectivity:${NC}"
    echo -e "   npm run validate-network"
    echo ""
    echo -e "${BOLD}Resources:${NC}"
    echo -e "‚Ä¢ Configuration: .env.development"
    echo -e "‚Ä¢ Mobile guide: mobile-connection-guide.md"
    echo -e "‚Ä¢ Network reports: test-reports/"
    echo -e "‚Ä¢ Backend logs: logs/backend.log"
    echo ""
    echo -e "${YELLOW}üí° Pro Tip: Use NetworkMonitor component in the app for real-time connectivity debugging${NC}"
}

# Main execution flow
main() {
    echo -e "${CYAN}Starting deployment process...${NC}"
    echo ""
    
    check_dependencies
    setup_dependencies
    configure_environment
    test_backend
    validate_network
    prepare_mobile
    final_validation
    show_summary
    
    echo -e "\n${BOLD}${GREEN}üöÄ Ready for mobile-backend development!${NC}"
}

# Handle command line arguments
case "${1:-}" in
    "--help"|"-h"|"help")
        echo "Usage: $0 [--help]"
        echo ""
        echo "Deploys the complete OmniShot development environment with:"
        echo "‚Ä¢ Backend server configuration"
        echo "‚Ä¢ Network connectivity validation"
        echo "‚Ä¢ Mobile development setup"
        echo "‚Ä¢ Environment configuration"
        exit 0
        ;;
    *)
        main
        ;;
esac