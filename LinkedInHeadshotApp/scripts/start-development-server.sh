#!/bin/bash

# OmniShot Development Server Startup Script
# Configures optimal connectivity for mobile-backend development

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
BACKEND_PORT=3000
EXPO_PORT=8081
HOST_IP="192.168.20.112"

echo -e "${CYAN}🚀 OmniShot Development Environment Setup${NC}"
echo "=================================================="

# Function to check if port is in use
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0  # Port is in use
    else
        return 1  # Port is free
    fi
}

# Function to start backend server
start_backend() {
    echo -e "\n${BLUE}🔧 Starting Backend Server...${NC}"
    
    if check_port $BACKEND_PORT; then
        echo -e "${GREEN}✅ Backend already running on port $BACKEND_PORT${NC}"
    else
        echo -e "${YELLOW}⏳ Starting backend server...${NC}"
        cd backend
        
        # Start backend in background
        nohup node server.js > ../logs/backend.log 2>&1 &
        BACKEND_PID=$!
        
        # Wait for backend to start
        sleep 3
        
        if check_port $BACKEND_PORT; then
            echo -e "${GREEN}✅ Backend started successfully (PID: $BACKEND_PID)${NC}"
            echo "   📍 Health check: http://$HOST_IP:$BACKEND_PORT/health"
        else
            echo -e "${RED}❌ Failed to start backend server${NC}"
            exit 1
        fi
        
        cd ..
    fi
}

# Function to validate network connectivity
validate_connectivity() {
    echo -e "\n${BLUE}🔍 Validating Network Connectivity...${NC}"
    
    if [ -f "scripts/validate-network-connectivity.js" ]; then
        node scripts/validate-network-connectivity.js
    else
        echo -e "${YELLOW}⚠️  Network validation script not found${NC}"
        
        # Basic connectivity test
        echo -e "${CYAN}🌐 Testing basic connectivity...${NC}"
        if curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 "http://$HOST_IP:$BACKEND_PORT/health" | grep -E "200|503" > /dev/null; then
            echo -e "${GREEN}✅ Backend is reachable at http://$HOST_IP:$BACKEND_PORT${NC}"
        else
            echo -e "${RED}❌ Cannot reach backend at http://$HOST_IP:$BACKEND_PORT${NC}"
            exit 1
        fi
    fi
}

# Function to configure Expo environment
configure_expo() {
    echo -e "\n${BLUE}📱 Configuring Expo Environment...${NC}"
    
    # Create or update .env.local with development settings
    cat > .env.local << EOF
# Development Environment Configuration
# Generated by start-development-server.sh at $(date)

# Primary development endpoint (direct IP)
EXPO_PUBLIC_API_BASE_URL=http://$HOST_IP:$BACKEND_PORT

# Network configuration
EXPO_PUBLIC_HOST_IP=$HOST_IP
EXPO_PUBLIC_BACKEND_PORT=$BACKEND_PORT

# Development flags
EXPO_PUBLIC_DEVELOPMENT_MODE=true
EXPO_PUBLIC_ENABLE_NETWORK_DEBUGGING=true

# Tunnel configuration (for Expo Go)
EXPO_PUBLIC_USE_TUNNEL_FALLBACK=true
EOF

    echo -e "${GREEN}✅ Environment configured for development${NC}"
    echo "   📍 Primary endpoint: http://$HOST_IP:$BACKEND_PORT"
    echo "   📝 Configuration saved to .env.local"
}

# Function to start Expo with optimal settings
start_expo() {
    echo -e "\n${BLUE}📱 Starting Expo Development Server...${NC}"
    
    local mode="$1"
    
    case $mode in
        "tunnel")
            echo -e "${CYAN}🌐 Starting with tunnel mode (for external devices)...${NC}"
            npx expo start --tunnel --port $EXPO_PORT
            ;;
        "lan")
            echo -e "${CYAN}🏠 Starting with LAN mode (for local network)...${NC}"
            npx expo start --lan --port $EXPO_PORT
            ;;
        "localhost")
            echo -e "${CYAN}💻 Starting with localhost mode...${NC}"
            npx expo start --localhost --port $EXPO_PORT
            ;;
        *)
            echo -e "${CYAN}🔄 Starting with auto-detection mode...${NC}"
            npx expo start --port $EXPO_PORT
            ;;
    esac
}

# Function to show connection instructions
show_instructions() {
    echo -e "\n${CYAN}📋 Connection Instructions${NC}"
    echo "============================"
    echo ""
    echo -e "${GREEN}For Physical Devices (Recommended):${NC}"
    echo "  • Ensure device is on same WiFi network"
    echo "  • Scan QR code in Expo Go app"
    echo "  • App will connect to: http://$HOST_IP:$BACKEND_PORT"
    echo ""
    echo -e "${GREEN}For Android Emulator:${NC}"
    echo "  • Use Android Studio emulator"
    echo "  • App will auto-detect emulator bridge"
    echo ""
    echo -e "${GREEN}For Development Build:${NC}"
    echo "  • Install development build on device"
    echo "  • Direct IP connection will be used"
    echo ""
    echo -e "${YELLOW}Troubleshooting:${NC}"
    echo "  • Run: npm run validate-network"
    echo "  • Check firewall settings if connection fails"
    echo "  • Ensure backend server is running"
}

# Main execution
main() {
    # Create logs directory
    mkdir -p logs
    
    # Parse command line arguments
    local expo_mode="${1:-auto}"
    
    # Start services
    start_backend
    validate_connectivity
    configure_expo
    
    echo -e "\n${GREEN}🎉 Development Environment Ready!${NC}"
    show_instructions
    
    echo -e "\n${BLUE}🚀 Starting Expo...${NC}"
    start_expo "$expo_mode"
}

# Help function
show_help() {
    echo "Usage: $0 [MODE]"
    echo ""
    echo "Modes:"
    echo "  tunnel     - Use Expo tunnel (best for external testing)"
    echo "  lan        - Use LAN mode (local network only)"
    echo "  localhost  - Use localhost mode (simulator only)"
    echo "  auto       - Auto-detect best mode (default)"
    echo ""
    echo "Examples:"
    echo "  $0 tunnel    # For testing on external devices"
    echo "  $0 lan       # For local network testing"
    echo "  $0           # Auto-detect mode"
}

# Handle command line arguments
case "$1" in
    "-h"|"--help"|"help")
        show_help
        exit 0
        ;;
    *)
        main "$1"
        ;;
esac