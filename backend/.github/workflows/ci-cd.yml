name: LinkedIn Headshot Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1
  ECR_REPOSITORY: production/linkedin-headshot/backend

jobs:
  test:
    name: Run Tests and Security Scans
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run database migrations
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: npm run migrate

    - name: Run linting
      run: npm run lint

    - name: Run tests with coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        REPLICATE_API_TOKEN: test-token
        CLOUDINARY_CLOUD_NAME: test-cloud
        CLOUDINARY_API_KEY: test-key
        CLOUDINARY_API_SECRET: test-secret
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
      run: |
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --push \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          .

    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name mobile-apps-cluster

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Deploy to Kubernetes
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      run: |
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/$ENVIRONMENT/

        # Update deployment image
        kubectl set image deployment/linkedin-headshot-backend \
          linkedin-headshot-backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -n linkedin-headshot-$ENVIRONMENT
        
        # Wait for rollout to complete
        kubectl rollout status deployment/linkedin-headshot-backend \
          -n linkedin-headshot-$ENVIRONMENT --timeout=600s

    - name: Run smoke tests
      env:
        ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      run: |
        # Get service endpoint
        SERVICE_URL=$(kubectl get service linkedin-headshot-backend-service \
          -n linkedin-headshot-$ENVIRONMENT \
          -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Wait for service to be ready
        echo "Waiting for service to be ready at http://$SERVICE_URL"
        timeout 600 bash -c 'until curl -f -s http://$SERVICE_URL/health; do echo "Waiting..."; sleep 10; done'
        
        # Run smoke tests
        echo "Running smoke tests..."
        curl -f -s http://$SERVICE_URL/health | jq '.status' | grep -q "ok"
        curl -f -s http://$SERVICE_URL/api/v1/status | jq '.status' | grep -q "ok"
        
        echo "Smoke tests passed!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: needs.deploy.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ✅ LinkedIn Headshot Backend deployed successfully!
          Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: needs.deploy.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ LinkedIn Headshot Backend deployment failed!
          Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}