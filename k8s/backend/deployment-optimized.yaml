apiVersion: apps/v1
kind: Deployment
metadata:
  name: linkedin-headshot-backend
  namespace: ${NAMESPACE:-linkedin-headshot-production}
  labels:
    app: linkedin-headshot-backend
    component: backend
    environment: ${ENVIRONMENT:-production}
    version: v2
    tier: api
spec:
  replicas: ${REPLICAS:-3}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: linkedin-headshot-backend
      component: backend
  template:
    metadata:
      labels:
        app: linkedin-headshot-backend
        component: backend
        environment: ${ENVIRONMENT:-production}
        version: v2
        tier: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        # Istio service mesh annotations
        sidecar.istio.io/inject: "true"
        # Linkerd annotations (alternative to Istio)
        linkerd.io/inject: enabled
        # Security annotations
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
        container.apparmor.security.beta.kubernetes.io/backend: runtime/default
        # Performance optimizations
        scheduler.alpha.kubernetes.io/preferred-durations: "5m"
    spec:
      serviceAccountName: linkedin-headshot-backend-sa
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [10001]
      initContainers:
      - name: db-migration
        image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        command: ['npm', 'run', 'migrate']
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: linkedin-headshot-secrets
              key: database-url
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
      containers:
      - name: backend
        image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: METRICS_PORT
          value: "8080"
        - name: NODE_OPTIONS
          value: "--max-old-space-size=768 --gc-interval=100"
        - name: UV_THREADPOOL_SIZE
          value: "16"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: linkedin-headshot-secrets
              key: database-url
        - name: DATABASE_POOL_MIN
          value: "5"
        - name: DATABASE_POOL_MAX
          value: "20"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: linkedin-headshot-secrets
              key: redis-url
        - name: REDIS_POOL_SIZE
          value: "10"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: linkedin-headshot-secrets
              key: jwt-secret
        - name: REPLICATE_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: linkedin-headshot-secrets
              key: replicate-api-token
        - name: CLOUDINARY_CLOUD_NAME
          valueFrom:
            secretKeyRef:
              name: linkedin-headshot-secrets
              key: cloudinary-cloud-name
        - name: CLOUDINARY_API_KEY
          valueFrom:
            secretKeyRef:
              name: linkedin-headshot-secrets
              key: cloudinary-api-key
        - name: CLOUDINARY_API_SECRET
          valueFrom:
            secretKeyRef:
              name: linkedin-headshot-secrets
              key: cloudinary-api-secret
        # Observability environment variables
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        - name: OTEL_EXPORTER_JAEGER_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        - name: OTEL_SERVICE_NAME
          value: "linkedin-headshot-backend"
        - name: LOG_LEVEL
          value: "info"
        - name: STRUCTURED_LOGGING
          value: "true"
        resources:
          requests:
            memory: "768Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1.5Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3000
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe"
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health/startup
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 20
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        - name: temp-volume
          mountPath: /tmp
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: cache-volume
          mountPath: /app/cache
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
            add: ["NET_BIND_SERVICE"]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          seccompProfile:
            type: RuntimeDefault
      # Sidecar container for log aggregation
      - name: log-forwarder
        image: fluent/fluent-bit:2.1.8
        env:
        - name: FLUENT_CONF
          value: fluent-bit.conf
        - name: FLUENT_OPT
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc/fluent-bit.conf
          subPath: fluent-bit.conf
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
      volumes:
      - name: logs-volume
        emptyDir:
          sizeLimit: 2Gi
      - name: temp-volume
        emptyDir:
          sizeLimit: 1Gi
          medium: Memory
      - name: config-volume
        configMap:
          name: linkedin-headshot-config
          defaultMode: 0440
      - name: cache-volume
        emptyDir:
          sizeLimit: 512Mi
          medium: Memory
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 45
      # Advanced scheduling configurations
      affinity:
        # Pod anti-affinity for high availability
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - linkedin-headshot-backend
              - key: tier
                operator: In
                values:
                - api
            topologyKey: kubernetes.io/hostname
        # Node affinity for cost optimization
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - c6i.large
                - c6i.xlarge
                - c5n.large
                - c5n.xlarge
          - weight: 80
            preference:
              matchExpressions:
              - key: karpenter.sh/capacity-type
                operator: In
                values:
                - spot
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      # Spot instance tolerations for cost optimization
      - key: "karpenter.sh/do-not-evict"
        operator: "Exists"
      - key: "node.kubernetes.io/spot"
        operator: "Exists"
        effect: "NoSchedule"
      # DNS configuration for performance
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      # Priority class for critical workloads
      priorityClassName: high-priority

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: linkedin-headshot-backend-sa
  namespace: ${NAMESPACE:-linkedin-headshot-production}
  labels:
    app: linkedin-headshot-backend
    component: security
automountServiceAccountToken: false